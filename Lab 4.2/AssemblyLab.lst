Microsoft (R) Macro Assembler Version 12.00.21005.1	    09/17/15 14:45:31
lab4.2.asm						     Page 1 - 1


				; Program Name:           lab4.2.asm

				; Program Description: Write a program that uses a loop to copy all the elements from an unsigned 
				;						Word (16-bit) array into an unsigned doubleword (32-bit) array.
				; Author: Chad Dreier
				; Date: 9/10/2015

				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 1234 5678 9ABC	arrayW WORD 1234h, 5678h, 9ABCh, 0DEF0h
	   DEF0
 00000008 00000000		arrayD DWORD 0h

 00000000			.code
 00000000			main proc
 00000000  B9 00000004			mov ecx, LENGTHOF arrayW		; Set ECX register to size of array for L1 loop count down
 00000005  BE 00000000 R		mov esi, OFFSET arrayW			; point ESI register to arrayW
 0000000A  BF 00000008 R		mov edi, OFFSET arrayD			; point EDI register to arrayD

													; BEGIN LOOP
 0000000F			L1:
 0000000F  B8 00000004			mov eax, LENGTHOF arrayW		; move length of arrayW to EAX
 00000014  2B C1			sub eax, ecx 					; subtract the ECX register from EAX - result is how many words from the beginning to copy
 00000016  6B C0 02			imul eax, TYPE arrayW			; multiply the word count by the size of arrayW to know where to copy from

 00000019  66| 8B 1C 30			mov bx, [esi+eax]				; copy the correct word to BX register
 0000001D  0F B7 D3			movzx edx, bx 					; copy to EDX register and zero extend the value
 00000020  6B C0 02			imul eax, 2						; multiply the word count by 2 for dword count
 00000023  89 14 38			mov [edi+eax], edx 				; move the zero extended result of EDX register to the correct position in arrayD
 00000026  8B 15 00000008 R		mov edx, arrayD

 0000002C  E2 E1			LOOP L1							; END LOOP

					invoke ExitProcess,0
 0000002E  6A 00	   *	    push   +000000000h
 00000030  E8 00000000 E   *	    call   ExitProcess
 00000035			main endp
				end main
Microsoft (R) Macro Assembler Version 12.00.21005.1	    09/17/15 14:45:31
lab4.2.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000000C DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000035 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000035 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000000F _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
arrayD . . . . . . . . . . . . .	DWord	 00000008 _DATA	
arrayW . . . . . . . . . . . . .	Word	 00000000 _DATA	

	   0 Warnings
	   0 Errors
